syntax = "v1"

type GetMetadataRequest {
	SN string `form:"sn"`
}

type GetMetadataResponse {
	Data string `json:"data"`
	Code int    `json:"code"`
}

type UpdateMetadataRequest {
	SN     string            `form:"sn"`
	Params map[string]string `form:"params"`
}

type UpdateMetadataResponse {
	Code int `json:"code"`
}

type GetMetricsRequest {
	SN        string `form:"sn"`
	StartTime int64  `form:"start_time"`
	EndTime   int64  `form:"end_time"`
}

type GetMetricsResponse {
	Data string `json:"data"`
	Code int    `json:"code"`
}

type GenerateDemoMetadataReq {
	DeviceNumber      int `form:"device_number"`
	DeviceParamNumber int `form:"device_param_number"`
}

type GenerateDemoMetadataResp {
	Code int `json:"code"`
}

type UpdateMetadataReq {
	DeviceNumber      int `form:"device_number"`
	DeviceParamNumber int `form:"device_param_number"`
	Thread            int `form:"thread"`
	Seconds           int `form:"seconds"`
}

type UpdateMetadataResp {
	JobId int `json:"job_id"`
}

type GetUpdateResultReq {
	JobId int `form:"job_id"`
}

type GetUpdateResultResp {
	End                        bool  `json:"end"`
	DeviceNumber               int   `json:"device_number"`
	DeviceParamNumber          int   `json:"device_param_number"`
	Thread                     int   `json:"thread"`
	Seconds                    int   `json:"seconds"`
	SuccessDeviceCount         int   `json:"success_device_count"`
	AverageLatencyMicroseconds int64 `json:"average_latency_microseconds"`
}

type GenerateDemoDeviceDataReq {
	DeviceNumber int   `form:"device_number"`
	StartTime    int64 `form:"start_time"`
	EndTime      int64 `form:"end_time"`
}

type GenerateDemoDeviceDataResp {
	Code int `json:"code"`
}

type GenerateDeviceVectorDataReq {
	StartTime int64 `form:"start_time"`
	EndTime   int64 `form:"end_time"`
}

type GenerateDeviceVectorDataResp {
	Code int `json:"code"`
}

type SearchBadDeviceReq {
	Type  int `form:"type"` // 0: search all, 1: Gradual Drift; 2. search fixed camera; 3: search random movement camera
	Limit int `form:"limit"`
}

type SearchBadDeviceResp {
	Code int    `json:"code"`
	Data string `json:"data"`
}

service http-api {
	@handler GetMetadataHandler
	get /metadata (GetMetadataRequest) returns (GetMetadataResponse) // Get metadata by SN

	@handler UpdateMetadataHandler
	get /metadata/update (UpdateMetadataRequest) returns (UpdateMetadataResponse) // Update metadata by SN

	@handler GetMetricsHandler
	get /metrics (GetMetricsRequest) returns (GetMetricsResponse) // Get device metrics

	@handler GenerateDemoMetadataHandler
	get /generate/metadata (GenerateDemoMetadataReq) returns (GenerateDemoMetadataResp) // DEMO use

	@handler RandomUpdateMetadataHandler
	get /update/metadata (UpdateMetadataReq) returns (UpdateMetadataResp) // Benchmark use

	@handler GetRandomUpdateResultHandler
	get /update/result (GetUpdateResultReq) returns (GetUpdateResultResp) // Benchmark use

	@handler GenerateDemoDeviceDataHandler
	get /generate/devicedata (GenerateDemoDeviceDataReq) returns (GenerateDemoDeviceDataResp) // DEMO use

	@handler GenerateDeviceVectorDataHandler
	get /generate/vector (GenerateDeviceVectorDataReq) returns (GenerateDeviceVectorDataResp) // Using camera rotation to generate device vector data

	@handler SearchBadDeviceHandler
	get /search/vector (SearchBadDeviceReq) returns (SearchBadDeviceResp) // Search bad device by Atlas MongoDB Vector Search
}

